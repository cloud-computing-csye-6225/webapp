name: Java Maven Build & Packer Validation

on:
  pull_request:
    branches:
      - main

  push:
    branches:
      - main

jobs:
  # Step 1: Java Maven Build
  build_test:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up JDK 17 for the build
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # Set up MySQL using the secrets provided
      - name: Set up MySQL
        uses: shogo82148/actions-setup-mysql@v1
        with:
          mysql-version: "8.0"
          root-password: ${{ secrets.MYSQL_PASSWORD }}

      # Create a database using the name stored in secrets
      - name: Create MySQL Database
        run: mysql -uroot -p${{ secrets.MYSQL_PASSWORD }} -e "CREATE DATABASE IF NOT EXISTS ${{ secrets.MYSQL_DB }};"

      # Create application.properties dynamically
      - name: Create application.properties
        run: |
          echo "spring.datasource.url=jdbc:mysql://${{ secrets.MYSQL_HOST }}:${{ secrets.MYSQL_PORT }}/${{ secrets.MYSQL_DB }}" > src/main/resources/application.properties
          echo "spring.datasource.username=root" >> src/main/resources/application.properties
          echo "spring.datasource.password=${{ secrets.MYSQL_PASSWORD }}" >> src/main/resources/application.properties
          echo "spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver" >> src/main/resources/application.properties
          echo "spring.jpa.hibernate.ddl-auto=update" >> src/main/resources/application.properties
          echo "spring.jpa.show-sql=true" >> src/main/resources/application.properties
          echo "spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect" >> src/main/resources/application.properties

      # Maven build using environment variables for MySQL connection
      - name: Build with Maven
        env:
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          MYSQL_PORT: ${{ secrets.MYSQL_PORT }}
          MYSQL_DB: ${{ secrets.MYSQL_DB }}
          MYSQL_USER: 'root'
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        run: mvn -B package --file pom.xml

      # Upload the JAR artifact for later use
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v3
        with:
          name: webapp-jar
          path: target/webapp-0.0.1-SNAPSHOT.jar

      # Clean up the dynamically generated application.properties file
      - name: Clean up application.properties
        run: rm src/main/resources/application.properties

  # Step 2: Packer Template Validation
  packer_validate:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Packer for validation
      - name: Set up Packer
        uses: hashicorp/setup-packer@v2
        with:
          version: latest

      # Perform Packer format check
      - name: Packer format check
        run: packer fmt -check -diff packer/packer.pkr.hcl

      # Perform Packer validation of the template
      - name: Packer validate template
        run: packer validate -var-file=packer/variables.pkr.hcl packer/packer.pkr.hcl
