name: Java Maven Build & Packer Validation

on:
  pull_request:
    branches:
      - main

  push:
    branches:
      - main

jobs:
  # Step 1: Java Maven Build
  build_test:
    name: ci status check
    environment: development
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up JDK 17 for the build
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # Set up MySQL using the secrets provided
      - name: Set up MySQL
        uses: shogo82148/actions-setup-mysql@v1
        env:
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        with:
          mysql-version: "8.0"
          root-password: ${{ env.MYSQL_PASSWORD }}
          database: ${{env.MYSQL_DB}}
          user: ${{ env.MYSQL_USER }}
          password: ${{ env.MYSQL_PASSWORD}}

      # Create a database using the name stored in secrets
      - name: Create MySQL Database
        env:
          MYSQL_DB: ${{ secrets.MYSQL_DB }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        run: mysql -u${{ env.MYSQL_USER}} -p${{ env.MYSQL_PASSWORD }} -e "CREATE DATABASE IF NOT EXISTS ${{ env.MYSQL_DB }};"

      # Create application.properties dynamically
      - name: Create application.properties
        env:
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          MYSQL_PORT: ${{ secrets.MYSQL_PORT }}
          MYSQL_DB: ${{ secrets.MYSQL_DB }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
        run: |
          mkdir -p src/main/resources
          echo "spring.application.name=webapp" > src/main/resources/application.properties
          echo "spring.datasource.url=jdbc:mysql://${{ env.MYSQL_HOST }}:${{ env.MYSQL_PORT }}/${{ env.MYSQL_DB }}" > src/main/resources/application.properties
          echo "spring.datasource.username=${{ env.MYSQL_USER}}" >> src/main/resources/application.properties
          echo "spring.datasource.password=${{ env.MYSQL_PASSWORD }}" >> src/main/resources/application.properties
          echo "spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver" >> src/main/resources/application.properties
          echo "amazonProperties.clientRegion=${{ env.AWS_REGION }}" >> src/main/resources/application.properties
          echo "amazonProperties.bucketName=${{ env.S3_BUCKET }}" >> src/main/resources/application.properties
          echo "sendgrid.api-key=${{ env.SENDGRID_API_KEY }}" >> src/main/resources/application.properties
          echo "spring.servlet.multipart.enabled=true" >> src/main/resources/application.properties
          echo "spring.servlet.multipart.file-size-threshold=2KB" >> src/main/resources/application.properties
          echo "spring.servlet.multipart.max-file-size=20MB" >> src/main/resources/application.properties
          echo "spring.servlet.multipart.max-request-size=100MB" >> src/main/resources/application.properties
          echo "publish.metrics=true" >> src/main/resources/application.properties
          echo "metrics.server.hostname=localhost" >> src/main/resources/application.properties
          echo "metrics.server.port=8125" >> src/main/resources/application.properties
          echo "spring.jpa.hibernate.ddl-auto=update" >> src/main/resources/application.properties
          echo "spring.jpa.show-sql=true" >> src/main/resources/application.properties
          echo "spring.jpa.open-in-view=false" >> src/main/resources/application.properties
          echo "appconfig.baseurl=http://localhost:8080" >> src/main/resources/application.properties
          

      # Maven build using environment variables for MySQL connection
      - name: Build with Maven
        env:
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          MYSQL_PORT: ${{ secrets.MYSQL_PORT }}
          MYSQL_DB: ${{ secrets.MYSQL_DB }}
          MYSQL_USER: 'root'
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
        run: mvn -B package --file pom.xml

      - name: Set up Packer
        uses: hashicorp/setup-packer@v2
        with:
          version: latest

      - name: Initialise Packer
        run: packer init packer/packer.pkr.hcl


      # Step 4: Packer format check
      - name: Packer format check
        run: packer fmt -check -diff packer/

      # Step 5: Packer validate template
      - name: Validate Packer template
        run: packer validate -var-file=packer/variables.pkrvars.hcl packer/packer.pkr.hcl


      - name: Build AMI with Packer
        run: packer build -var-file=packer/variables.pkrvars.hcl packer/packer.pkr.hcl

      - name: Extract Latest AMI ID
        id: extract-ami-id
        run: |
          AMI_ID=$(packer build -machine-readable ./packer/packer.pkr.hcl | grep -E 'artifact.*id' | cut -d, -f6)
          echo "AMI_ID=${AMI_ID}" >> $GITHUB_ENV
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Create New Launch Template Version
        id: create-launch-template
        run: |
          NEW_LAUNCH_TEMPLATE=$(aws ec2 create-launch-template-version \
            --launch-template-id ${{ secrets.LAUNCH_TEMPLATE_ID }} \
            --source-version $LATEST_VERSION \
            --version-description "Updated with new AMI ID" \
            --launch-template-data '{"ImageId":"'"${AMI_ID}"'"}' \
            --region ${{ secrets.AWS_REGION }})
          echo "LAUNCH_TEMPLATE_VERSION=$(echo $NEW_LAUNCH_TEMPLATE | jq -r '.LaunchTemplateVersion.VersionNumber')" >> $GITHUB_ENV
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Update Autoscaling Group
        run: |
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name ${{ secrets.AUTOSCALING_GROUP_NAME }} \
            --launch-template "LaunchTemplateId=${{ secrets.LAUNCH_TEMPLATE_ID }},Version=${{ env.LAUNCH_TEMPLATE_VERSION }}" \
            --region ${{ secrets.AWS_REGION }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Initiate Instance Refresh
        id: instance-refresh
        run: |
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name ${{ secrets.AUTOSCALING_GROUP_NAME }} \
            --region ${{ secrets.AWS_REGION }} \
            --query "InstanceRefreshId" --output text)
          echo "REFRESH_ID=${REFRESH_ID}" >> $GITHUB_ENV
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Wait for Instance Refresh to Complete
        run: |
          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name ${{ secrets.AUTOSCALING_GROUP_NAME }} \
              --region ${{ secrets.AWS_REGION }} \
              --query "InstanceRefreshes[?InstanceRefreshId=='${{ env.REFRESH_ID }}'].Status" --output text)
            if [[ "$STATUS" == "Successful" ]]; then
              echo "Instance refresh successful."
              break
            elif [[ "$STATUS" == "Failed" ]]; then
              echo "Instance refresh failed." >&2
              exit 1
            fi
            echo "Waiting for instance refresh to complete..."
            sleep 30
          done
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}





      # Clean up the dynamically generated application.properties file
      - name: Clean up application.properties
        run: rm src/main/resources/application.properties

