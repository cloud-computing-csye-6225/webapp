name: CD Pipeline for Testing Packer and Artifact Deployment

on:
  push:
    branches:
      - main

jobs:
  build_and_create_ami:
    name: depoly ami
    environment: development
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Set up MySQL
        uses: shogo82148/actions-setup-mysql@v1
        env:
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        with:
          mysql-version: "8.0"
          root-password: ${{ env.MYSQL_PASSWORD }}
          database: ${{env.MYSQL_DB}}
          user: ${{ env.MYSQL_USER }}
          password: ${{ env.MYSQL_PASSWORD}}

      # Create a database using the name stored in secrets
      - name: Create MySQL Database
        env:
          MYSQL_DB: ${{ secrets.MYSQL_DB }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        run: mysql -u${{ env.MYSQL_USER}} -p${{ env.MYSQL_PASSWORD }} -e "CREATE DATABASE IF NOT EXISTS ${{ env.MYSQL_DB }};"


      - name: Create application.properties
        env:
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          MYSQL_PORT: ${{ secrets.MYSQL_PORT }}
          MYSQL_DB: ${{ secrets.MYSQL_DB }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
        run: |
          mkdir -p src/main/resources
          echo "spring.application.name=webapp" > src/main/resources/application.properties
          echo "spring.datasource.url=jdbc:mysql://${{ env.MYSQL_HOST }}:${{ env.MYSQL_PORT }}/${{ env.MYSQL_DB }}" > src/main/resources/application.properties
          echo "spring.datasource.username=${{ env.MYSQL_USER}}" >> src/main/resources/application.properties
          echo "spring.datasource.password=${{ env.MYSQL_PASSWORD }}" >> src/main/resources/application.properties
          echo "spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver" >> src/main/resources/application.properties
          echo "amazonProperties.clientRegion=${{ env.AWS_REGION }}" >> src/main/resources/application.properties
          echo "amazonProperties.bucketName=${{ env.S3_BUCKET }}" >> src/main/resources/application.properties
          echo "sendgrid.api-key=${{ env.SENDGRID_API_KEY }}" >> src/main/resources/application.properties
          echo "spring.servlet.multipart.enabled=true" >> src/main/resources/application.properties
          echo "spring.servlet.multipart.file-size-threshold=2KB" >> src/main/resources/application.properties
          echo "spring.servlet.multipart.max-file-size=20MB" >> src/main/resources/application.properties
          echo "spring.servlet.multipart.max-request-size=100MB" >> src/main/resources/application.properties
          echo "publish.metrics=true" >> src/main/resources/application.properties
          echo "metrics.server.hostname=localhost" >> src/main/resources/application.properties
          echo "metrics.server.port=8125" >> src/main/resources/application.properties
          echo "spring.jpa.hibernate.ddl-auto=update" >> src/main/resources/application.properties
          echo "spring.jpa.show-sql=true" >> src/main/resources/application.properties
          echo "spring.jpa.open-in-view=false" >> src/main/resources/application.properties

      - name: Build with Maven
        env:
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          MYSQL_PORT: ${{ secrets.MYSQL_PORT }}
          MYSQL_DB: ${{ secrets.MYSQL_DB }}
          MYSQL_USER: 'root'
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
        run: mvn -B package --file pom.xml

      # Optional: Debugging step to verify file locations
      - name: List contents of target directory
        run: |
          ls -R target/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Packer
        uses: hashicorp/setup-packer@v2
        with:
          version: latest

      - name: Packer Init
        working-directory: ./packer
        run: packer init .

      - name: Validate Packer Template
        working-directory: ./packer
        run: packer validate .
