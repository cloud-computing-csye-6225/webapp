name: CI Pipeline for Testing Packer and Artifact Deployment

on:
  pull_request:
    branches:
      - main

jobs:
  # Step 1: Run Integration Tests and Build Artifact
  build_artifact:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Set up MySQL
        uses: shogo82148/actions-setup-mysql@v1
        with:
          mysql-version: "8.0"
          root-password: ${{ secrets.MYSQL_PASSWORD }}

      - name: Create MySQL Database
        run: mysql -uroot -p${{ secrets.MYSQL_PASSWORD }} -e "CREATE DATABASE IF NOT EXISTS ${{ secrets.MYSQL_DB }};"

      - name: Create application.properties
        run: |
          mkdir -p src/main/resources 
          echo "spring.datasource.url=jdbc:mysql://${{ secrets.MYSQL_HOST }}:${{ secrets.MYSQL_PORT }}/${{ secrets.MYSQL_DB }}" > src/main/resources/application.properties
          echo "spring.datasource.username=root" >> src/main/resources/application.properties
          echo "spring.datasource.password=${{ secrets.MYSQL_PASSWORD }}" >> src/main/resources/application.properties
          echo "spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver" >> src/main/resources/application.properties
          echo "spring.jpa.hibernate.ddl-auto=update" >> src/main/resources/application.properties
          echo "spring.jpa.show-sql=true" >> src/main/resources/application.properties
          echo "spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect" >> src/main/resources/application.properties

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Upload JAR and properties as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: webapp-artifacts
          path: |
            target/webapp-0.0.1-SNAPSHOT.jar
            src/main/resources/application.properties

  # Step 2: Packer Image Creation
  create_ami:
    runs-on: ubuntu-latest
    needs: build_artifact

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Packer
        uses: hashicorp/setup-packer@v2
        with:
          version: latest

      - name: Download webapp-artifacts
        uses: actions/download-artifact@v3
        with:
          name: webapp-artifacts
          path: packer/

      # Move files to the correct location for Packer
      - name: Move downloaded files to expected locations
        run: |
          mkdir -p packer/target packer/src/main/resources
          mv packer/webapp-0.0.1-SNAPSHOT.jar packer/target/webapp-0.0.1-SNAPSHOT.jar
          mv packer/application.properties packer/src/main/resources/application.properties

      - name: Packer Init
        run: packer init packer/packer.pkr.hcl

      - name: Create Packer Variables File
        run: |
          timestamp=$(date +"%Y%m%d%H%M%S")
          cat <<EOF > packer/variables.pkr.hcl
          aws_region      = "${{ secrets.AWS_REGION }}"
          ami_name        = "my-webapp-ami-${timestamp}"
          ami_description = "AMI creation for Assignment 04"
          instance_type   = "t2.small"
          vpc_id          = "${{ secrets.VPC_ID }}"
          subnet_id       = "${{ secrets.SUBNET_ID }}"
          ssh_username    = "ubuntu"
          EOF

      - name: Validate Packer Template
        run: packer validate -var-file=packer/variables.pkr.hcl packer/packer.pkr.hcl

      - name: Build AMI with Packer
        run: packer build -var-file=packer/variables.pkr.hcl packer/packer.pkr.hcl
